#!/bin/bash

#
# Heroku buildpack for Meteor with SWC support
# Modified to handle Meteor 3.3+ SWC native bindings
#

# fail fast.
set -e
# debug verbosely.
#set -x

# Load config vars into environment (from https://devcenter.heroku.com/articles/buildpack-api)
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir $3

# Enable verbose debugging if configured to -- though this has to come after
# we've loaded environment configs.
if [ -n "$BUILDPACK_VERBOSE" ]; then
  set -x
fi


# Get the path to dir one above this file.
BUILDPACK_DIR=$(cd -P -- "$(dirname -- "$0")" && cd .. && pwd -P)
# Get the directory our app is checked out in (the "BUILD_DIR"), passed by Heroku
APP_CHECKOUT_DIR=$1
CACHE_DIR=$2
if [ -n "$BUILDPACK_CLEAR_CACHE" ]; then
  echo "-----> Clearing cache dir."
  rm -rf "$CACHE_DIR/*"
fi

#
# Find the meteor app ($APP_SOURCE_DIR).
#

# Set meteor app dir's location to the root of the git repo, plus the value of
# METEOR_APP_DIR (which defaults empty).  If you put the meteor app in src/ or
# some other subdirectory, define METEOR_APP_DIR.
APP_SOURCE_DIR="${APP_CHECKOUT_DIR}"
if [ -n "$METEOR_APP_DIR" ]; then
  APP_SOURCE_DIR="${APP_SOURCE_DIR}/${METEOR_APP_DIR}"
fi

# Try "$APP_SOURCE_DIR/app/" if meteor app isn't there (the "Iron scaffolding
# tool" default).
if [ ! -d "$APP_SOURCE_DIR/.meteor" ] && [ -d "$APP_SOURCE_DIR/app/.meteor" ]; then
  APP_SOURCE_DIR="$APP_SOURCE_DIR/app/"
fi
if [ ! -d "$APP_SOURCE_DIR/.meteor" ]; then
  echo "FATAL: Can't find meteor app. Set METEOR_APP_DIR to the relative location of the meteor app within your repository if it's not in the root or 'app/' subdirectory.  (Tried ${APP_SOURCE_DIR})"
  exit 1
fi

# Where we will install meteor. Has to be outside the APP_CHECKOUT_DIR.
METEOR_DIR="$CACHE_DIR/meteor"
# Where we'll put things we compile.
COMPILE_DIR_SUFFIX=".meteor/heroku_build"
COMPILE_DIR="$APP_CHECKOUT_DIR"/"$COMPILE_DIR_SUFFIX"
# Try to minimize meteor's printing, unless we're running verbosely.
if [ -z "$BUILDPACK_VERBOSE" ]; then
  METEOR_PRETTY_OUTPUT=0
fi

# Create directories as needed.
mkdir -p "$APP_CHECKOUT_DIR" "$METEOR_DIR"
mkdir -p "$COMPILE_DIR" "$COMPILE_DIR/bin" "$COMPILE_DIR/lib"

# Set a default ROOT_URL if one is not defined. Currently, HEROKU_APP_NAME is
# only available if you enable the labs addon "Heroku Dyno Metadata":
# https://devcenter.heroku.com/articles/dyno-metadata
# This logic is duplicated in extra/root_url.sh so that it repeats on dyno
# restart.
if [ -z "$ROOT_URL" ] && [ -n "$HEROKU_APP_NAME" ] ; then
  export ROOT_URL="https://${HEROKU_APP_NAME}.herokuapp.com"
fi
if [ -z "$ROOT_URL" ] ; then
  echo "FATAL: ROOT_URL is not defined."
  exit 1
fi

#
# Install meteor
#

# Install the latest meteor, and rely on meteor to upgrade/downgrade itself to
# the .meteor/release target.
if [ -e "$METEOR_DIR/.meteor/meteor" ]; then
  echo "-----> Existing meteor installation found, using it."
else
  echo "-----> Installing meteor"
  curl -sS "https://install.meteor.com/" | HOME="$METEOR_DIR" /bin/sh
fi
# Function to execute meteor with proper HOME.
function METEOR {
  ARGS=$@
  HOME="$METEOR_DIR" "$METEOR_DIR/.meteor/meteor" $ARGS
}

#
# Build the meteor app!
#

# Change into the project directory. Once we're there, 'meteor' commands will
# run with the context of the target release (project .meteor/release) rather
# than the "latest" that is installed by install.meteor.com.
cd "$APP_SOURCE_DIR"

echo "-----> Target Meteor version: `METEOR --version`"

# Check if we're using Meteor 3.3+ which includes SWC
METEOR_VERSION=`METEOR --version | grep -o '[0-9]\+\.[0-9]\+' | head -1`
METEOR_MAJOR=`echo $METEOR_VERSION | cut -d. -f1`
METEOR_MINOR=`echo $METEOR_VERSION | cut -d. -f2`

if [ "$METEOR_MAJOR" -gt 3 ] || ([ "$METEOR_MAJOR" -eq 3 ] && [ "$METEOR_MINOR" -ge 3 ]); then
  echo "-----> Detected Meteor $METEOR_VERSION with SWC support"
  export METEOR_HAS_SWC=1
  
  # Set environment variables early for SWC
  export npm_config_target_platform=linux
  export npm_config_target_arch=x64
  export npm_config_target_libc=glibc
  
else
  echo "-----> Detected Meteor $METEOR_VERSION (pre-SWC)"
  export METEOR_HAS_SWC=0
fi

# Deal with non-server build targets.  Determine if we have --server-only flag
# capability (Meteor 1.3 and up).
echo "-----> Checking if this meteor version supports --server-only"
# Allow non-zero return from grep.
set +e
HAS_SERVER_ONLY=`METEOR help build | grep -e '--server-only'`
set -e
if [ -n "$HAS_SERVER_ONLY" ] ; then
  SERVER_ONLY_FLAG='--server-only'
else
  SERVER_ONLY_FLAG=""
fi
# Remove the Android platform if we don't support the --server-only flag
# (Meteor 1.2 and below).  iOS platform gets ignored properly.
if [ -z "$SERVER_ONLY_FLAG" ]; then
  echo "-----> Attempting to remove android platform."
  METEOR remove-platform android || true
  echo "-----> Moving on."
fi

# Clear specific SWC-related caches - after we've used Meteor commands
if [ "$METEOR_HAS_SWC" -eq 1 ]; then
  echo "-----> Clearing SWC-specific caches for native binding compatibility"
  
  # Clear specific SWC problematic packages, not the entire Meteor installation
  if [ -d "$METEOR_DIR/.meteor/packages/standard-minifier-js" ]; then
    rm -rf "$METEOR_DIR/.meteor/packages/standard-minifier-js"
    echo "-----> ✅ standard-minifier-js cache cleared"
  fi
  
  if [ -d "$METEOR_DIR/.meteor/packages/ecmascript" ]; then
    rm -rf "$METEOR_DIR/.meteor/packages/ecmascript"
    echo "-----> ✅ ecmascript cache cleared"
  fi
  
  if [ -d "$METEOR_DIR/.meteor/packages/typescript" ]; then
    rm -rf "$METEOR_DIR/.meteor/packages/typescript"
    echo "-----> ✅ typescript cache cleared"
  fi
  
  if [ -d "$METEOR_DIR/.meteor/packages/babel-compiler" ]; then
    rm -rf "$METEOR_DIR/.meteor/packages/babel-compiler"
    echo "-----> ✅ babel-compiler cache cleared"
  fi
  
  # Also clear local app cache
  if [ -d "$APP_SOURCE_DIR/.meteor/local" ]; then
    rm -rf "$APP_SOURCE_DIR/.meteor/local"
    echo "-----> ✅ Local Meteor cache cleared"
  fi
fi

# Identify the npm/node to use. We need to copy the node binary out to get the
# correct version in the built slug (e.g. 0.10.x for Meteor<1.4, 4.x for
# Meteor>=1.4).  We can't copy the whole meteor world because that's too large
# (Issue #125).

# Query node for its own path. As long as the Meteor version we got from
# install.meteor.com is >=1.3, "meteor node" is available, even if the target
# release predates that feature.
METEOR_NODE=`METEOR node -e "process.stdout.write(process.execPath)"`
# Assume npm is in the same dir as node.
METEOR_NPM="`dirname "$METEOR_NODE"`/npm"

if [ -z "$METEOR_NPM" ] || [ -z "$METEOR_NODE" ] ; then
  echo "FATAL: Can't find npm/node within meteor bundle. This is a bug. Please open an issue at https://github.com/AdmitHub/meteor-buildpack-horse.";
  exit 1
fi

# Copy node into place for production.
NODE="$COMPILE_DIR"/bin/node
cp "$METEOR_NODE" "$NODE"
chmod a+x "$NODE"

# Add npm and node path so that 1.4's npm-rebuild.js will function.
PATH="$METEOR_DIR/.meteor:`dirname $METEOR_NPM`:$COMPILE_DIR/bin:$PATH"

echo "-----> Using node: `$NODE --version`"
echo "----->    and npm: `$METEOR_NPM --version`"

# SWC Direct Binary Download Functions
install_swc_binaries() {
  echo "-----> Installing SWC binaries directly from registry"
  
  # Crear directorio temporal para SWC
  SWC_TEMP_DIR="$CACHE_DIR/swc-temp"
  mkdir -p "$SWC_TEMP_DIR"
  
  # Obtener URL del paquete más reciente
  echo "-----> Fetching latest @swc/core-linux-x64-gnu package info"
  SWC_TARBALL_URL=$(curl -sS https://registry.npmjs.org/@swc/core-linux-x64-gnu/latest | grep -o '"tarball":"[^"]*"' | cut -d'"' -f4)
  
  if [ -z "$SWC_TARBALL_URL" ]; then
    echo "-----> ⚠️  Failed to get SWC tarball URL, falling back to npm install"
    return 1
  fi
  
  echo "-----> Downloading SWC binary from: $SWC_TARBALL_URL"
  
  # Descargar y extraer el tarball
  if curl -sS "$SWC_TARBALL_URL" | tar -xz -C "$SWC_TEMP_DIR"; then
    echo "-----> ✅ SWC tarball downloaded and extracted"
  else
    echo "-----> ❌ Failed to download SWC tarball"
    rm -rf "$SWC_TEMP_DIR"
    return 1
  fi
  
  # Verificar que el archivo binario existe (múltiples nombres posibles)
  SWC_BINARY_FILE=""
  for binary_name in "swc.linux-x64-gnu.node" "*.linux-x64-gnu.node" "*.node"; do
    if ls "$SWC_TEMP_DIR/package/"$binary_name 1> /dev/null 2>&1; then
      SWC_BINARY_FILE=$(ls "$SWC_TEMP_DIR/package/"$binary_name | head -1)
      break
    fi
  done
  
  if [ -n "$SWC_BINARY_FILE" ]; then
    echo "-----> ✅ SWC binary found: $(basename "$SWC_BINARY_FILE")"
    
    # Instalar en múltiples ubicaciones donde Meteor puede buscar
    # 1. Project node_modules
    SWC_TARGET_DIR="$APP_SOURCE_DIR/node_modules/@swc/core-linux-x64-gnu"
    mkdir -p "$SWC_TARGET_DIR"
    cp -r "$SWC_TEMP_DIR/package/"* "$SWC_TARGET_DIR/"
    echo "-----> ✅ SWC binary installed in project node_modules"
    
    # 2. Meteor cache packages (donde busca internamente)
    if [ -d "$METEOR_DIR/.meteor/packages" ]; then
      echo "-----> Installing SWC binaries in Meteor packages cache"
      
      # Buscar directorios de packages que usen SWC
      for package_dir in "$METEOR_DIR/.meteor/packages"/standard-minifier-js/.*/plugin.*/npm/node_modules/meteor/babel-compiler/node_modules/@meteorjs/swc-core; do
        if [ -d "$(dirname "$package_dir")" ]; then
          SWC_METEOR_DIR="$package_dir/.swc/node_modules/@swc/core-linux-x64-gnu"
          mkdir -p "$SWC_METEOR_DIR"
          cp -r "$SWC_TEMP_DIR/package/"* "$SWC_METEOR_DIR/"
          echo "-----> ✅ SWC binary installed in Meteor cache: $(basename $(dirname $(dirname $(dirname "$package_dir"))))"
        fi
      done
      
      # También para ecmascript y typescript
      for package_type in ecmascript typescript; do
        for package_dir in "$METEOR_DIR/.meteor/packages"/$package_type/.*/plugin.*/npm/node_modules/meteor/babel-compiler/node_modules/@meteorjs/swc-core; do
          if [ -d "$(dirname "$package_dir")" ]; then
            SWC_METEOR_DIR="$package_dir/.swc/node_modules/@swc/core-linux-x64-gnu"
            mkdir -p "$SWC_METEOR_DIR"
            cp -r "$SWC_TEMP_DIR/package/"* "$SWC_METEOR_DIR/"
            echo "-----> ✅ SWC binary installed in $package_type cache"
          fi
        done
      done
    fi
    
    # Limpiar temporal
    rm -rf "$SWC_TEMP_DIR"
    return 0
  else
    echo "-----> ❌ SWC binary not found in downloaded package"
    echo "-----> Contents of package:"
    ls -la "$SWC_TEMP_DIR/package/" 2>/dev/null || echo "No package directory found"
    rm -rf "$SWC_TEMP_DIR"
    return 1
  fi
}

# Instalar también el core principal de SWC
install_swc_core() {
  echo "-----> Installing @swc/core package"
  
  SWC_CORE_TEMP_DIR="$CACHE_DIR/swc-core-temp"
  mkdir -p "$SWC_CORE_TEMP_DIR"
  
  SWC_CORE_TARBALL_URL=$(curl -sS https://registry.npmjs.org/@swc/core/latest | grep -o '"tarball":"[^"]*"' | cut -d'"' -f4)
  
  if [ -n "$SWC_CORE_TARBALL_URL" ]; then
    echo "-----> Downloading @swc/core from: $SWC_CORE_TARBALL_URL"
    
    if curl -sS "$SWC_CORE_TARBALL_URL" | tar -xz -C "$SWC_CORE_TEMP_DIR"; then
      # 1. Instalar @swc/core en project node_modules
      SWC_CORE_TARGET_DIR="$APP_SOURCE_DIR/node_modules/@swc/core"
      mkdir -p "$SWC_CORE_TARGET_DIR"
      cp -r "$SWC_CORE_TEMP_DIR/package/"* "$SWC_CORE_TARGET_DIR/"
      echo "-----> ✅ @swc/core installed in project node_modules"
      
      # 2. Instalar en Meteor cache packages
      if [ -d "$METEOR_DIR/.meteor/packages" ]; then
        echo "-----> Installing @swc/core in Meteor packages cache"
        
        # Para standard-minifier-js
        for package_dir in "$METEOR_DIR/.meteor/packages"/standard-minifier-js/.*/plugin.*/npm/node_modules/meteor/babel-compiler/node_modules/@meteorjs/swc-core; do
          if [ -d "$(dirname "$package_dir")" ]; then
            SWC_CORE_METEOR_DIR="$package_dir/.swc/node_modules/@swc/core"
            mkdir -p "$SWC_CORE_METEOR_DIR"
            cp -r "$SWC_CORE_TEMP_DIR/package/"* "$SWC_CORE_METEOR_DIR/"
            echo "-----> ✅ @swc/core installed in Meteor standard-minifier-js cache"
          fi
        done
        
        # Para ecmascript y typescript
        for package_type in ecmascript typescript; do
          for package_dir in "$METEOR_DIR/.meteor/packages"/$package_type/.*/plugin.*/npm/node_modules/meteor/babel-compiler/node_modules/@meteorjs/swc-core; do
            if [ -d "$(dirname "$package_dir")" ]; then
              SWC_CORE_METEOR_DIR="$package_dir/.swc/node_modules/@swc/core"
              mkdir -p "$SWC_CORE_METEOR_DIR"
              cp -r "$SWC_CORE_TEMP_DIR/package/"* "$SWC_CORE_METEOR_DIR/"
              echo "-----> ✅ @swc/core installed in Meteor $package_type cache"
            fi
          done
        done
      fi
      
      rm -rf "$SWC_CORE_TEMP_DIR"
      return 0
    else
      echo "-----> ⚠️  Failed to download @swc/core"
      rm -rf "$SWC_CORE_TEMP_DIR"
      return 1
    fi
  else
    echo "-----> ⚠️  Failed to get @swc/core tarball URL"
    rm -rf "$SWC_CORE_TEMP_DIR"
    return 1
  fi
}

# Verificar que SWC está disponible
verify_swc_installation() {
  echo "-----> Verifying SWC installation"
  
  # Verificar binarios SWC con múltiples patrones
  SWC_BINARY_FOUND=""
  if [ -d "$APP_SOURCE_DIR/node_modules/@swc/core-linux-x64-gnu/" ]; then
    SWC_BINARY_FOUND=$(find "$APP_SOURCE_DIR/node_modules/@swc/core-linux-x64-gnu/" -name "*.node" 2>/dev/null | head -1)
  fi
  
  if [ -n "$SWC_BINARY_FOUND" ]; then
    echo "-----> ✅ SWC Linux x64 binary found: $(basename "$SWC_BINARY_FOUND")"
  else
    echo "-----> ❌ SWC Linux x64 binary missing"
    echo "-----> Checking directory structure..."
    if [ -d "$APP_SOURCE_DIR/node_modules/@swc/core-linux-x64-gnu/" ]; then
      ls -la "$APP_SOURCE_DIR/node_modules/@swc/core-linux-x64-gnu/" 2>/dev/null || echo "Directory exists but is empty"
    else
      echo "Directory @swc/core-linux-x64-gnu does not exist"
    fi
  fi
  
  if [ -f "$APP_SOURCE_DIR/node_modules/@swc/core/package.json" ]; then
    echo "-----> ✅ @swc/core package found"
  else
    echo "-----> ❌ @swc/core package missing"
  fi
  
  # Lista directorios SWC para debugging
  echo "-----> SWC directories in node_modules:"
  ls -la "$APP_SOURCE_DIR/node_modules/@swc/" 2>/dev/null || echo "No @swc directory found"
}

# Install SWC binaries in Meteor package cache (after failed build when paths exist)
install_swc_in_meteor_cache() {
  echo "-----> Installing SWC binaries in existing Meteor package cache"
  
  # Crear directorio temporal para SWC
  SWC_TEMP_DIR="$CACHE_DIR/swc-cache-temp"
  mkdir -p "$SWC_TEMP_DIR"
  
  # Descargar ambos paquetes
  echo "-----> Downloading SWC packages for cache installation"
  
  # Descargar @swc/core-linux-x64-gnu
  SWC_TARBALL_URL=$(curl -sS https://registry.npmjs.org/@swc/core-linux-x64-gnu/latest | grep -o '"tarball":"[^"]*"' | cut -d'"' -f4)
  if [ -n "$SWC_TARBALL_URL" ]; then
    SWC_BINARY_DIR="$SWC_TEMP_DIR/binary"
    mkdir -p "$SWC_BINARY_DIR"
    curl -sS "$SWC_TARBALL_URL" | tar -xz -C "$SWC_BINARY_DIR"
    echo "-----> ✅ Downloaded @swc/core-linux-x64-gnu"
  fi
  
  # Descargar @swc/core  
  SWC_CORE_TARBALL_URL=$(curl -sS https://registry.npmjs.org/@swc/core/latest | grep -o '"tarball":"[^"]*"' | cut -d'"' -f4)
  if [ -n "$SWC_CORE_TARBALL_URL" ]; then
    SWC_CORE_DIR="$SWC_TEMP_DIR/core"
    mkdir -p "$SWC_CORE_DIR"
    curl -sS "$SWC_CORE_TARBALL_URL" | tar -xz -C "$SWC_CORE_DIR"
    echo "-----> ✅ Downloaded @swc/core"
  fi
  
  # Instalar en todas las ubicaciones encontradas en Meteor cache
  if [ -d "$METEOR_DIR/.meteor/packages" ]; then
    echo "-----> Searching for SWC installation targets in Meteor cache"
    
    # Buscar todos los directorios que contienen @meteorjs/swc-core
    find "$METEOR_DIR/.meteor/packages" -name "@meteorjs" -type d 2>/dev/null | while read meteorjs_dir; do
      if [ -d "$meteorjs_dir/swc-core" ]; then
        SWC_INSTALL_DIR="$meteorjs_dir/swc-core/.swc/node_modules/@swc"
        echo "-----> Found SWC target: $SWC_INSTALL_DIR"
        
        # Instalar @swc/core
        if [ -d "$SWC_CORE_DIR/package" ]; then
          CORE_TARGET="$SWC_INSTALL_DIR/core"
          mkdir -p "$CORE_TARGET"
          cp -r "$SWC_CORE_DIR/package/"* "$CORE_TARGET/"
          echo "-----> ✅ Installed @swc/core in $(basename $(dirname $(dirname "$meteorjs_dir")))"
        fi
        
        # Instalar @swc/core-linux-x64-gnu
        if [ -d "$SWC_BINARY_DIR/package" ]; then
          BINARY_TARGET="$SWC_INSTALL_DIR/core-linux-x64-gnu"
          mkdir -p "$BINARY_TARGET"
          cp -r "$SWC_BINARY_DIR/package/"* "$BINARY_TARGET/"
          echo "-----> ✅ Installed @swc/core-linux-x64-gnu in $(basename $(dirname $(dirname "$meteorjs_dir")))"
        fi
      fi
    done
  fi
  
  # Limpiar temporal
  rm -rf "$SWC_TEMP_DIR"
  echo "-----> SWC cache installation completed"
}

# Production-specific SWC functions (working from $COMPILE_DIR/app/programs/server)
install_swc_binaries_production() {
  echo "-----> Installing SWC binaries directly from registry (production)"
  
  # Crear directorio temporal para SWC
  SWC_TEMP_DIR="$CACHE_DIR/swc-temp-prod"
  mkdir -p "$SWC_TEMP_DIR"
  
  # Obtener URL del paquete más reciente
  echo "-----> Fetching latest @swc/core-linux-x64-gnu package info"
  SWC_TARBALL_URL=$(curl -sS https://registry.npmjs.org/@swc/core-linux-x64-gnu/latest | grep -o '"tarball":"[^"]*"' | cut -d'"' -f4)
  
  if [ -z "$SWC_TARBALL_URL" ]; then
    echo "-----> ⚠️  Failed to get SWC tarball URL, falling back to npm install"
    return 1
  fi
  
  echo "-----> Downloading SWC binary from: $SWC_TARBALL_URL"
  
  # Descargar y extraer el tarball
  if curl -sS "$SWC_TARBALL_URL" | tar -xz -C "$SWC_TEMP_DIR"; then
    echo "-----> ✅ SWC tarball downloaded and extracted"
  else
    echo "-----> ❌ Failed to download SWC tarball"
    rm -rf "$SWC_TEMP_DIR"
    return 1
  fi
  
  # Verificar que el archivo binario existe (múltiples nombres posibles)
  SWC_BINARY_FILE=""
  for binary_name in "swc.linux-x64-gnu.node" "*.linux-x64-gnu.node" "*.node"; do
    if ls "$SWC_TEMP_DIR/package/"$binary_name 1> /dev/null 2>&1; then
      SWC_BINARY_FILE=$(ls "$SWC_TEMP_DIR/package/"$binary_name | head -1)
      break
    fi
  done
  
  if [ -n "$SWC_BINARY_FILE" ]; then
    echo "-----> ✅ SWC binary found: $(basename "$SWC_BINARY_FILE")"
    
    # Crear estructura de directorios necesaria en el build de producción (current dir)
    SWC_TARGET_DIR="node_modules/@swc/core-linux-x64-gnu"
    mkdir -p "$SWC_TARGET_DIR"
    
    # Copiar el binario y archivos necesarios
    cp -r "$SWC_TEMP_DIR/package/"* "$SWC_TARGET_DIR/"
    
    echo "-----> ✅ SWC binary installed successfully at $SWC_TARGET_DIR"
    
    # Limpiar temporal
    rm -rf "$SWC_TEMP_DIR"
    return 0
  else
    echo "-----> ❌ SWC binary not found in downloaded package"
    echo "-----> Contents of package:"
    ls -la "$SWC_TEMP_DIR/package/" 2>/dev/null || echo "No package directory found"
    rm -rf "$SWC_TEMP_DIR"
    return 1
  fi
}

install_swc_core_production() {
  echo "-----> Installing @swc/core package (production)"
  
  SWC_CORE_TEMP_DIR="$CACHE_DIR/swc-core-temp-prod"
  mkdir -p "$SWC_CORE_TEMP_DIR"
  
  SWC_CORE_TARBALL_URL=$(curl -sS https://registry.npmjs.org/@swc/core/latest | grep -o '"tarball":"[^"]*"' | cut -d'"' -f4)
  
  if [ -n "$SWC_CORE_TARBALL_URL" ]; then
    echo "-----> Downloading @swc/core from: $SWC_CORE_TARBALL_URL"
    
    if curl -sS "$SWC_CORE_TARBALL_URL" | tar -xz -C "$SWC_CORE_TEMP_DIR"; then
      # Instalar @swc/core en el directorio actual (production)
      SWC_CORE_TARGET_DIR="node_modules/@swc/core"
      mkdir -p "$SWC_CORE_TARGET_DIR"
      cp -r "$SWC_CORE_TEMP_DIR/package/"* "$SWC_CORE_TARGET_DIR/"
      
      echo "-----> ✅ @swc/core installed successfully at $SWC_CORE_TARGET_DIR"
      rm -rf "$SWC_CORE_TEMP_DIR"
      return 0
    else
      echo "-----> ⚠️  Failed to download @swc/core"
      rm -rf "$SWC_CORE_TEMP_DIR"
      return 1
    fi
  else
    echo "-----> ⚠️  Failed to get @swc/core tarball URL"
    rm -rf "$SWC_CORE_TEMP_DIR"
    return 1
  fi
}

# SWC Support: If we use npm on root, run npm install with proper SWC handling
if [ -e "$APP_SOURCE_DIR"/package.json ]; then
  echo "-----> Installing npm dependencies"
  
  if [ "$METEOR_HAS_SWC" -eq 1 ]; then
    echo "-----> SWC detected: Installing SWC binaries directly from registry"
    
    # Clear npm cache to avoid SWC binding issues
    echo "-----> Clearing npm cache for SWC compatibility"
    $METEOR_NPM cache clean --force || true
    
    # Remove node_modules and package-lock.json to ensure clean SWC install
    echo "-----> Removing existing node_modules for clean SWC installation"
    rm -rf node_modules package-lock.json || true
    
    # Create node_modules directory structure
    mkdir -p node_modules/@swc
    
    # Intentar instalar binarios directamente
    if install_swc_binaries && install_swc_core; then
      echo "-----> ✅ SWC binaries installed directly from registry"
      
      # Instalar otras dependencias sin conflictos SWC
      echo "-----> Installing other npm dependencies (excluding SWC packages)"
      $METEOR_NPM install --ignore-optional
      
      # Force rebuild of native modules for Linux x64 in development
      echo "-----> Force rebuilding native modules for development (Linux x64)"
      
      # Remove and reinstall bcrypt to force compilation  
      if [ -d "node_modules/bcrypt" ]; then
        echo "-----> Removing existing bcrypt and reinstalling from source (development)"
        rm -rf node_modules/bcrypt
        $METEOR_NPM install bcrypt --build-from-source || echo "bcrypt install from source failed"
      fi
      
      $METEOR_NPM rebuild --build-from-source || echo "Native modules rebuild completed with warnings"
      
      # Verificar instalación final
      verify_swc_installation
    else
      echo "-----> ⚠️  Direct SWC install failed, falling back to npm install"
      # Fallback al método original
      echo "-----> Installing dependencies with SWC optional binaries (fallback)"
      $METEOR_NPM install --include=optional
      
      # Explicitly install SWC core if it's in devDependencies
      if grep -q "@swc/core" package.json; then
        echo "-----> Explicitly installing @swc/core (fallback)"
        $METEOR_NPM install @swc/core --save-dev
      fi
      
      # Rebuild native modules for Linux x64 (fallback)
      echo "-----> Rebuilding native modules for development (fallback)"
      $METEOR_NPM rebuild bcrypt 2>/dev/null || echo "bcrypt rebuild skipped"
      
      # Verify SWC installation (fallback)
      echo "-----> Verifying SWC installation (fallback)"
      if [ -d "node_modules/@swc/core" ]; then
        echo "-----> ✅ SWC core found in node_modules"
        # List available SWC bindings for debugging
        echo "-----> Available SWC bindings:"
        ls -la node_modules/@swc/core* 2>/dev/null || echo "No SWC core bindings directory found"
      else
        echo "-----> ⚠️  SWC core not found in node_modules"
      fi
    fi
  else
    # Standard npm install for pre-SWC versions
    $METEOR_NPM install
  fi
fi

# Related to https://github.com/meteor/meteor/issues/2796 and
# https://github.com/meteor/meteor/issues/2606.  Some packages only build their
# assets at runtime, and thus they are not available for bundling unless meteor
# has been launched.  To opt-in to this, set BUILDPACK_PRELAUNCH_METEOR=1.
if [ -n "$BUILDPACK_PRELAUNCH_METEOR" ]; then
  echo "-----> BUILDPACK_PRELAUNCH_METEOR: Pre-launching meteor to build packages assets"
  # Remove the Android platform because it fails due to the Android tools not
  # being installed, but leave the iOS platform because it's ignored.
  METEOR remove-platform android || true
  HOME=$METEOR_DIR timeout -s9 60 $METEOR_DIR/.meteor/meteor --settings settings.json || true
fi

# Now on to bundling. Don't put the bundle in $APP_CHECKOUT_DIR during
# bundling, or it will recurse, trying to bundle up its own bundling.

echo "-----> Building Meteor app with ROOT_URL: $ROOT_URL"
BUNDLE_DEST=`mktemp -d "$BUILDPACK_DIR/build-XXXX"`

# The actual invocation of `meteor build`!
# For SWC versions, we might need additional environment variables
if [ "$METEOR_HAS_SWC" -eq 1 ]; then
  echo "-----> Building with SWC support"
  # Set environment variables that might help with SWC
  export NODE_OPTIONS="--max-old-space-size=4096"
  export METEOR_DISABLE_OPTIMISTIC_CACHING=1
  # Force npm to use linux x64 binaries during build
  export npm_config_target_platform=linux
  export npm_config_target_arch=x64
  export npm_config_target_libc=glibc
  # Disable npm optional dependencies that might conflict
  export METEOR_NPM_INSTALL_ARGS="--include=optional"
fi

# Run the meteor build with error handling for SWC issues
if [ "$METEOR_HAS_SWC" -eq 1 ]; then
  echo "-----> Attempting Meteor build with SWC error recovery"
  
  # First attempt with normal build
  if ! METEOR build $BUILD_OPTIONS --server $ROOT_URL $SERVER_ONLY_FLAG --directory $BUNDLE_DEST; then
    echo "-----> First build attempt failed, trying SWC recovery strategies"
    
    # Strategy 1: Install SWC binaries in Meteor package cache locations
    echo "-----> Strategy 1: Installing SWC binaries in Meteor package cache"
    install_swc_in_meteor_cache
    
    # Strategy 2: Try to rebuild packages that failed
    echo "-----> Strategy 2: Attempting to reinstall Meteor packages"
    # Force Meteor to rebuild all packages
    if ! METEOR rebuild 2>/dev/null; then
      echo "-----> Meteor rebuild not available, continuing with build"
    fi
    
    # Try build again
    if ! METEOR build $BUILD_OPTIONS --server $ROOT_URL $SERVER_ONLY_FLAG --directory $BUNDLE_DEST; then
      echo "-----> Strategy 3: Building with forced package refresh"
      
      # Strategy 3: Force Meteor to refresh packages
      METEOR update --packages-only || true
      
      # Install SWC again after package refresh
      install_swc_in_meteor_cache
      
      # Final attempt
      METEOR build $BUILD_OPTIONS --server $ROOT_URL $SERVER_ONLY_FLAG --directory $BUNDLE_DEST
    fi
  fi
else
  # Standard build for pre-SWC versions
  METEOR build $BUILD_OPTIONS --server $ROOT_URL $SERVER_ONLY_FLAG --directory $BUNDLE_DEST
fi

echo "-----> Moving built slug to $COMPILE_DIR/app"
mv $BUNDLE_DEST/bundle "$COMPILE_DIR/app"
rmdir $BUNDLE_DEST

# Run npm install on the built slug; only for '--production' dependencies.
echo "-----> Installing npm production dependencies on built slug"
if [ -e "$COMPILE_DIR"/app/programs/server/package.json ]; then
  cd "$COMPILE_DIR"/app/programs/server
  
  if [ "$METEOR_HAS_SWC" -eq 1 ]; then
    echo "-----> Installing production dependencies with SWC support"
    
    # Create node_modules structure for production
    mkdir -p node_modules/@swc
    
    # Install SWC binaries directly for production
    if install_swc_binaries_production && install_swc_core_production; then
      echo "-----> ✅ SWC binaries installed directly in production bundle"
      
      # Install other production dependencies excluding SWC
      $METEOR_NPM install --production --ignore-optional
      
      # Force rebuild of native modules for Linux x64
      echo "-----> Force rebuilding native modules for production (Linux x64)"

      # Method 1: Remove and reinstall bcrypt to force compilation (root level)
      if [ -d "node_modules/bcrypt" ]; then
        echo "-----> Removing existing bcrypt (root) and reinstalling from source"
        rm -rf node_modules/bcrypt
        $METEOR_NPM install bcrypt --build-from-source || echo "bcrypt install from source failed"
      fi

      # Method 2: Handle Meteor's internal bcrypt (in accounts-password)
      METEOR_BCRYPT_PATH="npm/node_modules/meteor/accounts-password/node_modules/bcrypt"
      if [ -d "$METEOR_BCRYPT_PATH" ]; then
        echo "-----> Found Meteor internal bcrypt at $METEOR_BCRYPT_PATH"
        echo "-----> Rebuilding bcrypt native bindings for Linux x64"

        # Save the package version for logging
        BCRYPT_VERSION=$(grep '"version"' "$METEOR_BCRYPT_PATH/package.json" | head -1 | sed 's/.*: "\(.*\)".*/\1/')
        echo "-----> Detected bcrypt version: $BCRYPT_VERSION"

        # Remove only the native binary files (not the whole package)
        echo "-----> Removing macOS bcrypt binaries"
        find "$METEOR_BCRYPT_PATH" -name "*.node" -type f -delete

        # Rebuild bcrypt using npm rebuild which handles node-pre-gyp correctly
        echo "-----> Rebuilding bcrypt native bindings..."
        cd "$COMPILE_DIR"/app/programs/server
        $METEOR_NPM rebuild bcrypt --build-from-source 2>&1 | tail -20 || echo "⚠️  bcrypt rebuild failed"

        # Verify the binary was built for Linux
        if [ -f "$METEOR_BCRYPT_PATH/lib/binding/napi-v3/bcrypt_lib.node" ]; then
          echo "-----> ✅ bcrypt binary rebuilt successfully for Linux"
          file "$METEOR_BCRYPT_PATH/lib/binding/napi-v3/bcrypt_lib.node" || true
        else
          echo "-----> ⚠️  bcrypt binary not found at expected location"
          echo "-----> Listing bcrypt directory structure:"
          ls -la "$METEOR_BCRYPT_PATH" 2>&1 | head -15 || true
        fi
      else
        echo "-----> Meteor internal bcrypt not found (may not be using accounts-password)"
      fi

      # Method 2.5: Handle Meteor's internal argon2 (in accounts-password)
      METEOR_ARGON2_PATH="npm/node_modules/meteor/accounts-password/node_modules/argon2"
      if [ -d "$METEOR_ARGON2_PATH" ]; then
        echo "-----> Found Meteor internal argon2 at $METEOR_ARGON2_PATH"
        echo "-----> Rebuilding argon2 native bindings for Linux x64"

        # Save the package version for logging
        ARGON2_VERSION=$(grep '"version"' "$METEOR_ARGON2_PATH/package.json" | head -1 | sed 's/.*: "\(.*\)".*/\1/')
        echo "-----> Detected argon2 version: $ARGON2_VERSION"

        # Remove old binaries
        echo "-----> Removing macOS argon2 binaries"
        rm -rf "$METEOR_ARGON2_PATH/prebuilds"
        rm -rf "$METEOR_ARGON2_PATH/build"

        # Rebuild argon2 from source using node-gyp
        echo "-----> Rebuilding argon2 native bindings..."
        cd "$METEOR_ARGON2_PATH"
        npx node-gyp rebuild 2>&1 | tail -10 || echo "⚠️  node-gyp rebuild failed"

        # argon2 uses node-gyp-build which expects binaries in prebuilds/
        # Copy the compiled binary to the location node-gyp-build expects
        if [ -f "build/Release/argon2.node" ]; then
          echo "-----> Creating prebuilds structure for node-gyp-build"
          mkdir -p prebuilds/linux-x64
          cp build/Release/argon2.node prebuilds/linux-x64/node.napi.node
          echo "-----> ✅ argon2 binary copied to prebuilds/linux-x64/node.napi.node"
          file prebuilds/linux-x64/node.napi.node || true
        else
          echo "-----> ⚠️  argon2 binary not found at build/Release/argon2.node"
          echo "-----> Listing build directory:"
          ls -la build/ 2>&1 | head -10 || echo "No build directory found"
        fi

        cd "$COMPILE_DIR"/app/programs/server
      else
        echo "-----> Meteor internal argon2 not found (may not be using accounts-password)"
      fi

      # Method 3: Force rebuild all native modules
      $METEOR_NPM rebuild --build-from-source || echo "Native modules rebuild completed with warnings"
    else
      echo "-----> ⚠️  Direct SWC install failed in production, using fallback"
      # Fallback to standard npm install with optional dependencies
      $METEOR_NPM install --production --include=optional
      
      # Force rebuild of native modules for Linux x64 (fallback)
      echo "-----> Force rebuilding native modules for production (fallback)"

      # Remove and reinstall bcrypt to force compilation (root level)
      if [ -d "node_modules/bcrypt" ]; then
        echo "-----> Removing existing bcrypt (root) and reinstalling from source (fallback)"
        rm -rf node_modules/bcrypt
        $METEOR_NPM install bcrypt --build-from-source || echo "bcrypt install from source failed"
      fi

      # Handle Meteor's internal bcrypt (in accounts-password) - fallback
      METEOR_BCRYPT_PATH="npm/node_modules/meteor/accounts-password/node_modules/bcrypt"
      if [ -d "$METEOR_BCRYPT_PATH" ]; then
        echo "-----> Found Meteor internal bcrypt at $METEOR_BCRYPT_PATH (fallback)"
        echo "-----> Rebuilding bcrypt native bindings for Linux x64 (fallback)"

        # Save the package version for logging
        BCRYPT_VERSION=$(grep '"version"' "$METEOR_BCRYPT_PATH/package.json" | head -1 | sed 's/.*: "\(.*\)".*/\1/')
        echo "-----> Detected bcrypt version: $BCRYPT_VERSION"

        # Remove only the native binary files (not the whole package)
        echo "-----> Removing macOS bcrypt binaries (fallback)"
        find "$METEOR_BCRYPT_PATH" -name "*.node" -type f -delete

        # Rebuild bcrypt using npm rebuild which handles node-pre-gyp correctly
        echo "-----> Rebuilding bcrypt native bindings (fallback)..."
        cd "$COMPILE_DIR"/app/programs/server
        $METEOR_NPM rebuild bcrypt --build-from-source 2>&1 | tail -20 || echo "⚠️  bcrypt rebuild failed"

        # Verify the binary was built for Linux
        if [ -f "$METEOR_BCRYPT_PATH/lib/binding/napi-v3/bcrypt_lib.node" ]; then
          echo "-----> ✅ bcrypt binary rebuilt successfully for Linux (fallback)"
          file "$METEOR_BCRYPT_PATH/lib/binding/napi-v3/bcrypt_lib.node" || true
        else
          echo "-----> ⚠️  bcrypt binary not found at expected location (fallback)"
          echo "-----> Listing bcrypt directory structure:"
          ls -la "$METEOR_BCRYPT_PATH" 2>&1 | head -15 || true
        fi
      else
        echo "-----> Meteor internal bcrypt not found (fallback)"
      fi

      # Handle Meteor's internal argon2 (in accounts-password) - fallback
      METEOR_ARGON2_PATH="npm/node_modules/meteor/accounts-password/node_modules/argon2"
      if [ -d "$METEOR_ARGON2_PATH" ]; then
        echo "-----> Found Meteor internal argon2 at $METEOR_ARGON2_PATH (fallback)"
        echo "-----> Rebuilding argon2 native bindings for Linux x64 (fallback)"

        # Save the package version for logging
        ARGON2_VERSION=$(grep '"version"' "$METEOR_ARGON2_PATH/package.json" | head -1 | sed 's/.*: "\(.*\)".*/\1/')
        echo "-----> Detected argon2 version: $ARGON2_VERSION"

        # Remove old binaries
        echo "-----> Removing macOS argon2 binaries (fallback)"
        rm -rf "$METEOR_ARGON2_PATH/prebuilds"
        rm -rf "$METEOR_ARGON2_PATH/build"

        # Rebuild argon2 from source using node-gyp
        echo "-----> Rebuilding argon2 native bindings (fallback)..."
        cd "$METEOR_ARGON2_PATH"
        npx node-gyp rebuild 2>&1 | tail -10 || echo "⚠️  node-gyp rebuild failed"

        # argon2 uses node-gyp-build which expects binaries in prebuilds/
        # Copy the compiled binary to the location node-gyp-build expects
        if [ -f "build/Release/argon2.node" ]; then
          echo "-----> Creating prebuilds structure for node-gyp-build (fallback)"
          mkdir -p prebuilds/linux-x64
          cp build/Release/argon2.node prebuilds/linux-x64/node.napi.node
          echo "-----> ✅ argon2 binary copied to prebuilds/linux-x64/node.napi.node (fallback)"
          file prebuilds/linux-x64/node.napi.node || true
        else
          echo "-----> ⚠️  argon2 binary not found at build/Release/argon2.node (fallback)"
          echo "-----> Listing build directory:"
          ls -la build/ 2>&1 | head -10 || echo "No build directory found"
        fi

        cd "$COMPILE_DIR"/app/programs/server
      else
        echo "-----> Meteor internal argon2 not found (fallback)"
      fi

      $METEOR_NPM rebuild --build-from-source || echo "Native modules rebuild completed with warnings"
    fi
    
    # Check if SWC binaries are available in production bundle
    if [ -d "node_modules/@swc" ]; then
      echo "-----> ✅ SWC binaries available in production bundle"
      echo "-----> SWC production contents:"
      ls -la node_modules/@swc/ 2>/dev/null || echo "No @swc directory found"
    else
      echo "-----> ⚠️  SWC binaries not found in production bundle"
    fi
  else
    $METEOR_NPM install --production
  fi
  
  cd "$APP_SOURCE_DIR"
fi

#
# Environment
#
# Add an export of PATH which includes our compile dir, etc.
echo "-----> Adding PATH environment"
mkdir -p "$APP_CHECKOUT_DIR"/.profile.d
cat > "$APP_CHECKOUT_DIR"/.profile.d/path.sh <<EOF
  #!/bin/sh
  export PATH=\$HOME/$COMPILE_DIR_SUFFIX/bin:\$PATH
  export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$HOME/$COMPILE_DIR_SUFFIX/lib
EOF

# Add SWC-specific environment variables if needed
if [ "$METEOR_HAS_SWC" -eq 1 ]; then
  echo "-----> Adding SWC environment variables"
  cat > "$APP_CHECKOUT_DIR"/.profile.d/swc.sh <<EOF
  #!/bin/sh
  # SWC-specific environment variables
  export NODE_OPTIONS="\$NODE_OPTIONS --max-old-space-size=4096"
  export METEOR_DISABLE_OPTIMISTIC_CACHING=1
  export npm_config_target_platform=linux
  export npm_config_target_arch=x64
  export npm_config_target_libc=glibc
EOF
fi

#
# Extras
#

# source scripts in 'extra' dir, if any.  Create them for custom stuff like
# binary dependencies, additional environment settings, etc.
echo "-----> Running extras"
for file in `ls "$BUILDPACK_DIR"/extra | sort`; do
  . "$BUILDPACK_DIR"/extra/$file
done

#
# Clear cache after build is done
#
if [ -n "$BUILDPACK_CLEAR_CACHE" ]; then
  echo "-----> Clearing cache dir."
  rm -rf $METEOR_DIR
fi